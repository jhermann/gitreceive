#! /bin/bash
#
# For details about this script, see
#   https://github.com/jhermann/gitreceive
#
# MIT-licensed

GITUSER=${GITUSER:-git}
GITGROUP=${GITGROUP:-users}
GITHOME="${GITHOME:-/var/lib/$GITUSER}"
BASEDIR=$(cd $(dirname $(readlink -f "$0" || echo "$0")) && pwd)
SELF="$BASEDIR/$(basename "$0")"

case "$1" in
    #
    # Public commands
    #

    init) # gitreceive init
        useradd -d "$GITHOME" -g "$GITGROUP" -c "gitreceive account" --system $GITUSER || true
        id $GITUSER
        mkdir -p "$GITHOME/.ssh"
        touch "$GITHOME/.ssh/authorized_keys"
        cat >"$GITHOME/receiver" <<'EOF'
#! /bin/bash
# For debugging only!
echo "*** repository=$1 revision=$2 username=$3 fingerprint=$4"
tar tvf -
EOF
        cat >"$GITHOME/gitreceive" <<EOF
#! /bin/bash
# Call global script with proper environment
export GITUSER=$GITUSER
export GITGROUP=$GITGROUP
export GITHOME="$GITHOME"
"$SELF" "\$@"
EOF
        chmod +x "$GITHOME/receiver" "$GITHOME/gitreceive"
        chown -R $GITUSER.$GITGROUP "$GITHOME"
        echo "Created receiver script in '$GITHOME' for user '$GITUSER'."
        ;;

    upload-key) # sudo gitreceive upload-key <username>
        KEY="$(cat)"
        KEY_USER="${2:?You MUST provide a username for this key}"
        echo "$KEY" >"$GITHOME/.ssh/$KEY_USER.pub" # save original key
        FINGERPRINT=$(ssh-keygen -lf /dev/stdin <<<"$KEY" | awk '{print $2}')
        AUTHORIZED_KEYS="$GITHOME/.ssh/authorized_keys"
        # When this key is used, use the ssh 'forced command' feature to have 'gitreceive run' to run instead.
        KEY_PREFIX="command=\"$GITHOME/gitreceive run $KEY_USER $FINGERPRINT\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
        echo "$KEY_PREFIX $KEY" >> "$AUTHORIZED_KEYS"
        chown $GITUSER.$GITGROUP "$AUTHORIZED_KEYS" "$GITHOME/.ssh/$KEY_USER.pub"
        echo $FINGERPRINT
        ;;

    #
    # Internal commands
    #
    run)
        export RECEIVE_USER="${2:?Receive user is missing}"
        export RECEIVE_FINGERPRINT="${3:?Fingerprint is missing}"
        # ssh provides the original requested command in $SSH_ORIGINAL_COMMAND
        export RECEIVE_REPO="$(echo $SSH_ORIGINAL_COMMAND | awk '{print $2}' | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g')"
        REPO_PATH="$GITHOME/$RECEIVE_REPO"
        if [ ! -d "$REPO_PATH" ]; then
            mkdir -p "$REPO_PATH"
            cd "$REPO_PATH"
            git init --bare > /dev/null
        fi
        cd "$GITHOME"
        PRERECEIVE_HOOK="$REPO_PATH/hooks/pre-receive"
        cat > "$PRERECEIVE_HOOK" <<EOF
#!/bin/bash
cat | $SELF hook
EOF
        chmod +x "$PRERECEIVE_HOOK"
        git-shell -c "$SSH_ORIGINAL_COMMAND"
        ;;

    hook)
        while read oldrev newrev refname ; do
            # Only run this script for the master branch. You can remove this
            # if block if you wish to run it for others as well.
            if [[ "$refname" = "refs/heads/master" ]] ; then

                git archive $newrev | "$GITHOME/receiver" "$RECEIVE_REPO" "$newrev" "$RECEIVE_USER" "$RECEIVE_FINGERPRINT"

                rc=$?
                if [[ $rc != 0 ]] ; then
                    echo "      ERROR: failed on rev $newrev - push denied"
                    exit $rc
                fi
            fi
        done
        #exit 1 # for debugging
        ;;

    *)
        echo "Usage:" $(basename "$0") "<command> [options]"
        ;;
esac
